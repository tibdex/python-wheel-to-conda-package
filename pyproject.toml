[tool.poetry]
authors = ["Thibault Derousseaux <tibdex@gmail.com>"]
description = "Convert a Pure-Python Wheel to a noarch Conda package"
keywords = ["conda", "conda-package", "python-wheel", "wheel"]
license = "MIT"
name = "python-wheel-to-conda-package"
packages = [{include = "python_wheel_to_conda_package"}]
readme = "README.md"
repository = "https://github.com/tibdex/python-wheel-to-conda-package"
version = "0.2.1"

[tool.poetry.dependencies]
python = ">=3.9,<3.12"

[tool.poetry.group.dev.dependencies]
black = "^23.1"
mypy = "^1.1.1"
pandas = "^1.5.3"
pandas-stubs = "^1.5.3"
pytest = "^7.2.2"
ruff = "^0.0.254"

[tool.poetry.scripts]
python-wheel-to-conda-package = 'python_wheel_to_conda_package.__main__:main'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = [
  "setuptools"
]
ignore_missing_imports = true

[tool.ruff]
ignore = [
  "ANN102", # Type checkers can infer it.
  "C901", # Complex functions can be more legible than many small ones.
  "COM812", # Covered by Black.
  "E501", # Covered by Black.
  "EM101", # Not worse the annoyance.
  "EM102", # Not worse the annoyance.
  # The following `D` rules are unnecessary.
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "F403", # Useful to reexport all public symbols from an imported modules in an `__init__.py`.
  "PLR0912", # Complex functions can be more legible than many small ones.
  "PT004", # Useless distinction.
  "S101", # `assert` is useful when used correctly (https://realpython.com/python-assert-statement).
  "TCH", # Circular dependencies of any kind must be avoided.
  "TRY003", # Not worse the annoyance.
]
target-version = "py39"
select = ["ALL"]

[tool.ruff.per-file-ignores]
"__main__.py" = [
  "T201" # It's OK to use print in scripts.
]

[tool.ruff.pydocstyle]
convention = "google"
